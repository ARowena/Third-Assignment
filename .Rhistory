library(XML)
URL <- 'http://news.bbc.co.uk/2/hi/uk_news/politics/8044207.stm'
# Get and parse all tables on the webpage
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
names(tables)
ExpensesTable <- tables[[5]]
head(ExpensesTable)[, 1:3]
View(ExpensesTable)
View(ExpensesTable)
library(stringr)
str_trim(' hello   ')
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
# Get and parse all tables on the webpage
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
medaltable <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(medaltable)
medaltable <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
medaltable <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(medaltable)
MedalsTable <- medaltable[[1]]
head(MedalsTable)[, 1:3]
View(MedalsTable)
View(MedalsTable)
names(MedalsTable)[V2]<-paste("Country")
names(MedalsTable)[2]<-paste("Country")
head(MedalsTable)[, 1:3]
names(MedalsTable)[3]<-paste("Gold")
names(MedalsTable)[2]<-paste("Country")
names(MedalsTable)[3]<-paste("Gold")
names(MedalsTable)[4]<-paste("Silver")
names(MedalsTable)[5]<-paste("Bronze")
names(MedalsTable)[6]<-paste("Total")
View(MedalsTable)
View(MedalsTable)
names(MedalsTable)[1]<-paste("Rank")
View(MedalsTable)
View(MedalsTable)
ascending <- arrange(MedalsTable, Gold)
head(ascending)[1:3, ]
ascending <- arrange(MedalsTable, Gold)
head(ascending)[1:30, ]
ascending <- arrange(MedalsTable, Total)
head(ascending)[1:30, ]
descending <- arrange(MedalsTable, Total)
head(descending)[1:3, ]
group_data <- group_by(MedalsTable, Rank)
head(group_data)
min_max_medals <- summarize(group_data,
min_medals = min(Total),
max_medals = max(Total))
head(min_max_medals)[1:3, ]
min_max_medals <- summarize(group_data,
min_medals = min (Total),
max_medals = max (Total))
head(min_max_medals)[1:3, ]
descending <- arrange(MedalsTable, Total)
head(descending)[1:7, ]
group_data <- group_by(MedalsTable,Total, Gold, Silver, Rank)
head(group_data)
class(Total)
class(MedalsTable)
class(MedalsTable$Total)
class(MedalsTable$Total)
MedalsTable[,2]=as.numeric(MedalsTable[,2])
class(MedalsTable$Total)
as.numeric(MedalsTable$Total)
class(MedalsTable$Total)
all_tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(all_tables)
medals <- as.data.frame(all_tables)
medals <- select(medals, -NULL.V1, -NULL.V7)
medals(medals) <- c('country', 'gold', 'silver', 'bronze', 'total')
names(medals) <- c('country', 'gold', 'silver', 'bronze', 'total')
medals$country <- as.character(medals$country)
for (i in 2:5) medals[, i] <- as.integer(medals[, i])
for (i in 2:5) medals[, i] <- as.integer(medals[, i])
medals <- arrange(medals, desc(total))
head(MedalsTable)[, 1:5]
medals$country <- as.character(medals$country)
head(MedalsTable)[, 1:5]
View(MedalsTable)
View(MedalsTable)
head(medals)[, 1:5]
View(medals)
View(medals)
data(Prestige)
library(car)
library(car)
install.packages("car")
data(Prestige)
data(Prestige)
data (Prestige)
data(Prestige)
load(Prestige)
data("Prestige")
data()
data("swiss")
?swiss
M1<-lm(examination ~ education, data=swiss)
M1<-lm(Examination ~ Education, data=swiss)
summary(M1)
M1<-lm(Examination ~ Education+Fertility+Catholic, data=swiss)
M1<-lm(Examination ~ Education, data=swiss)
M2<-lm(Examination ~ Education+Fertility+Catholic, data=swiss)
M3<-lm(Examination ~ Education+Fertility+Catholic+Infant.Mortality, data=swiss)
summary(M2)
summary(M3)
install.package("plm")
install.packages("plm")
summary(swiss$Examination)
swiss$highexam <- ifelse(swiss$examination >22 ,
c("high"), c("low"))
swiss$highexam <- ifelse(swiss$examination > 22 ,
c("high"), c("low"))
confint(M3)
library(plm)
data("wages")
library(plm)
data("wages")
data("Wages")
?Wages
install.packages("stargazer")
library("stargazer")
labels <- c('(Intercept)', 'Education', 'Fertility',
'Catholic', 'Infant Mortality',
)
stargazer::stargazer(M1, M2, M3, covariate.labels = labels,
title = 'Regression Results',
digits = 2, type = 'html')
labels <- c('(Intercept)', 'Education', 'Fertility',
'Catholic', 'Infant Mortality',
)
stargazer::stargazer(M1, M2, M3, covariate.labels = NULL,
title = 'Regression Results',
digits = 2, type = 'html')
install.packages("stargazer")
library("stargazer")
labels <- c('(Intercept)', 'Education', 'Fertility',
'Catholic', 'Infant Mortality')
stargazer::stargazer(M1, M2, M3, covariate.labels = NULL,
title = 'Regression Results',
digits = 2, type = 'html')
install.packages("stargazer")
labels <- c('(Intercept)', 'Education', 'Fertility',
'Catholic', 'Infant Mortality')
stargazer::stargazer(M1, M2, M3, covariate.labels = NULL,
title = 'Regression Results',
digits = 2, type = 'html')
stargazer::stargazer(M1, M2, M3, covariate.labels = NULL,
title = 'Regression Results',
digits = 2, type = 'latex', headers=FALSE)
stargazer::stargazer(M1, M2, M3, covariate.labels = NULL,
title = 'Regression Results',
digits = 2, type = 'html')
library("stargazer")
M1<-lm(Examination ~ Education, data=swiss)
summary(M1)
M2<-lm(Examination ~ Education+Fertility+Catholic, data=swiss)
M3<-lm(Examination ~ Education+Fertility+Catholic+Infant.Mortality, data=swiss)
summary(M2)
summary(M3)
summary(swiss$Examination)
confint(M3)
####
labels <- c('(Intercept)', 'Education', 'Fertility',
'Catholic', 'Infant Mortality')
stargazer::stargazer(M1, M2, M3, covariate.labels = NULL,
title = 'Regression Results',
digits = 2, type = 'html')
install.packages(c("httr","dplyr","xlsx","rio","stargazer"))
install.packages(c("Zelig","repmis","plm","tidyr"))
library(httr)
library(dplyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
y
Y
library(httr)
library(dplyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
install.packages(c("class", "foreign", "MASS", "mgcv", "nlme", "nnet", "rmarkdown", "roxygen2", "rvest", "spatial", "stringi"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx"
temp <- tempfile()
download.file(URL, temp, mode='wb')
controlc <- read.xlsx2(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = TRUE)
unlink(temp)
download.file(URL, temp, mode='wb')
controlc <- read.xlsx2(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = TRUE)
unlink(temp)
library(httr)
library(dplyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
install.packages(c("httr","dplyr","xlsx","rio","stargazer"))
install.packages(c("httr", "dplyr", "xlsx", "rio", "stargazer"))
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
download.file(URL, temp, mode='wb')
controlc <- read.xlsx2(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = TRUE)
unlink(temp)
View(controlc)
controlc <- read.xlsx2(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
unlink(temp)
URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx"
temp <- tempfile()
download.file(URL, temp, mode='wb')
controlc <- read.xlsx2(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
unlink(temp)
View(controlc)
# try(setwd("C:/Users/Natalia etc"), silent = TRUE)
install.packages("WDI")
library(WDI)
install.packages("WDI", "RJSONIO")
install.packages("WDI", "RJSONIO")
library(WDI)
natrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
library(WDI)
# 3. Download Total natural resources rents (% of GDP) -
# "Total natural resources rents are the sum of oil rents,
# natural gas rents, coal rents (hard and soft), mineral rents, and forest rents".
natrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
View(natrents)
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
totalnatrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
gnipc <- WDI(indicator = 'NY.GNP.PCAP.PP.KD')
# 2. Load WDI package
library(WDI)
# 3. Download the relevant variables for our project:
# 3.1 Total natural resources rents (% of GDP) -
# "Total natural resources rents are the sum of oil rents,
# natural gas rents, coal rents (hard and soft), mineral rents, and forest rents".
totrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
# 3.2 Oil rents (% of GDP) -
# "Oil rents are the difference between the value of crude
# oil production at world prices and total costs of production".
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
# 3.3 Oil rents (% of GDP) -
# "Oil rents are the difference between the value of crude
# oil production at world prices and total costs of production".
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
# 3.4 GNI per capita, PPP (constant 2011 international $)
# "GNI per capita based on purchasing power parity (PPP).
# PPP GNI is gross national income (GNI) converted to international
# dollars using purchasing power parity rates. An international dollar
# has the same purchasing power over GNI as a U.S. dollar has in the
# United States. GNI is the sum of value added by all resident producers
# plus any product taxes (less subsidies) not included in the valuation of
# output plus net receipts of primary income (compensation of employees
# and property income) from abroad. Data are in constant 2011 international dollars".
gnipc <- WDI(indicator = 'NY.GNP.PCAP.PP.KD')
# 3.5 Unemployment, total (% of total labor force) (modeled ILO estimate)
# Unemployment refers to the share of the labor force that is without
# work but available for and seeking employment.
unemp <- WDI(indicator = 'SL.UEM.TOTL.ZS')
# 3.1 Total natural resources rents (% of GDP) -
# "Total natural resources rents are the sum of oil rents,
# natural gas rents, coal rents (hard and soft), mineral rents, and forest rents".
totrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
# 3.2 Oil rents (% of GDP) -
# "Oil rents are the difference between the value of crude
# oil production at world prices and total costs of production".
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
# 3.3 Natural gas rents (% of GDP) -
# "Natural gas rents are the difference between the value of
# natural gas production at world prices and total costs of production.".
gasrents <- WDI(indicator = 'NY.GDP.NGAS.RT.ZS')
# 3.4 GNI per capita, PPP (constant 2011 international $)
# "GNI per capita based on purchasing power parity (PPP).
# PPP GNI is gross national income (GNI) converted to international
# dollars using purchasing power parity rates. An international dollar
# has the same purchasing power over GNI as a U.S. dollar has in the
# United States. GNI is the sum of value added by all resident producers
# plus any product taxes (less subsidies) not included in the valuation of
# output plus net receipts of primary income (compensation of employees
# and property income) from abroad. Data are in constant 2011 international dollars".
gnipc <- WDI(indicator = 'NY.GNP.PCAP.PP.KD')
# 3.5 Unemployment, total (% of total labor force) (modeled ILO estimate)
# Unemployment refers to the share of the labor force that is without
# work but available for and seeking employment.
unemp <- WDI(indicator = 'SL.UEM.TOTL.ZS')
governance <- WDI(indicator = 'IQ.CPA.TRAN.XQ')
load("~/Desktop/Third-Assignment/124920_1ucdp-prio-2015.rdata")
View(ucdp.prio)
View(gasrents)
URL <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
View(ucdp.prio)
UrlAddress <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
DataUrl <- RCurl::getURL(UrlAddress)
conflict_data <- read.table(textConnection(DataUrl),
sep = ",", header = TRUE)
load("~/Desktop/Third-Assignment/124920_1ucdp-prio-2015.rdata")
View(ucdp.prio)
conflict_data <- read.Rdata(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
download.file("http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata", "temp.rData")
load("temp.rData")
download.file("http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata", "temp.rData")
load("temp.rData")
View(ucdp.prio)
#########################################################################################
# 1. Download the data from website of Uppsala University's Department of Peace and Conflict Research
UrlAddress <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
DataUrl <- RCurl::getURL(UrlAddress)
conflict_data <- read.table(textConnection(DataUrl),
sep = ",", header = TRUE)
download.file("http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata", "temp.rData")
load("temp.rData")
URL <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
temp <- tempfile()
download.file(URL, temp)
conflict_data <- read
(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
unlink(temp)
View(ucdp.prio)
View(sub_cath)
View(sub_cath)
#########################################################################################
# UCDP/PRIO Armed Conflict Dataset: Data Gathering, Tidying and Preparing for Merge
# ***UCDP/PRIO Armed Conflict Dataset v.4-2015, 1946 – 2014***
# Content: a conflict-year dataset with information on armed conflict where at
# least one party is the government of a state in the time period 1946-2014.
# The most recent is version 4-2015.
#########################################################################################
# 1. Download the data from website of Uppsala University's Department of Peace and Conflict Research
UrlAddress <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
DataUrl <- RCurl::getURL(UrlAddress)
conflict_data <- read.table(textConnection(DataUrl),
sep = ",", header = TRUE)
download.file("http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata", "temp.rData")
load("temp.rData")
URL <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
temp <- tempfile()
download.file(URL, temp)
conflict_data <- read
(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
unlink(temp)
# 1. Download the data from website of Uppsala University's Department of Peace and Conflict Research
UrlAddress <- "http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata"
DataUrl <- RCurl::getURL(UrlAddress)
conflict_data <- read.table(textConnection(DataUrl),
sep = ",", header = TRUE)
download.file("http://www.pcr.uu.se/digitalAssets/124/124920_1ucdp-prio-2015.rdata", "temp.rData")
load("temp.rData")
View(ucdp.prio)
View(ucdp.prio)
#################################################################################################################################
# Corruption and Natural Resource Rents - by Natalia Alvarado and Gabriel Tarriba
# Due date: 13.11.2015
# This file gathers data from various sources (World Governance Indicators and World Development Indicators), cleans it, merges
# it and organizes it for analysis (Section 1). Then, it carries out analyses on the data (Section 2)
#################################################################################################################################
#################################################################################################################################
# Section I: Data preparation
#################################################################################################################################
# 1. Set working directory for our two computers (so that the code runs on either of them)
getwd()
try(setwd("C:\Users\Natalia\Documents\GitHub\Third-Assignment"), silent = TRUE)
try(setwd("/Users/Gabriel/Desktop/Third-Assignment"), silent = TRUE)
# 2. Load libraries
library(httr)
library(dplyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(xlsxjars)
library(rJava)
library(ggplot2)
##################################################################################
# Subsection 1.1 -  Gather corruption data from the World Governance Indicators  #
##################################################################################
# 1.1.1 Get the datafile from an URL and set it as a Dataframe
try(URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx", silent = TRUE)
fname <- "worldbank_wgidataset.xlsx"
if (!(file.exists(fname))) {
fname <- tempfile()
download.file(URL, fname, mode='wb')
}
controlc <- read.xlsx2(fname, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
# 1.1.2. Keep only relevant variables
cc <- controlc[c(2, 1, 3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93)]
# 1.1.3. Set the years as an observation
names(cc) = as.character(unlist(cc[1,]))
cc = cc[-1,]
row.names(cc) <- NULL
colnames(cc)[1] <- "wbcode"
colnames(cc)[2] <- "country"
# 1.1.4. Set the years as an observation and ordering the data
cc <- gather(cc, Year, Estimate, 3:18)
cc <- cc[order(cc$country, cc$Year), ]
row.names(cc) <- NULL
# 1.1.5. Create ID for each observation and matching country codes
cc <- mutate(cc, ID = rownames(cc))
cc <- cc[c(5,1,2,3,4)]
cc$iso2c <- countrycode(cc$wbcode, origin = "wb",destination = "iso2c", warn = TRUE)
cc$country <- countrycode(cc$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
cc <- cc[c(1,6,2,3,4,5)]
cc <- cc[-c(3)]
colnames(cc)[1] <- "id"
colnames(cc)[4] <- "year"
colnames(cc)[5] <- "estimate"
#################################################################################
# Subsection 1.2 - Gather and clean data from the World Development Indicators  #
#################################################################################
# 1.2.1. Download the relevant variables for our project:
# Total natural resources rents (% of GDP) -
# "Total natural resources rents are the sum of oil rents,
# natural gas rents, coal rents (hard and soft), mineral rents, and forest rents".
totrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
# Oil rents (% of GDP) -
# "Oil rents are the difference between the value of
# oil production at world prices and total costs of production.".
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
# Natural gas rents (% of GDP) -
# "Natural gas rents are the difference between the value of
# natural gas production at world prices and total costs of production.".
gasrents <- WDI(indicator = 'NY.GDP.NGAS.RT.ZS')
# GDP per capita (constant 2005 US$)
# "GDP per capita is gross domestic product divided by midyear population.
# GDP is the sum of gross value added by all resident producers in the economy
# plus any product taxes and minus any subsidies not included in the value of
# the products. It is calculated without making deductions for depreciation of
# fabricated assets or for depletion and degradation of natural resources. Data
# are in constant 2005 U.S. dollars".
gdppc <- WDI(indicator = 'NY.GDP.PCAP.KD')
# Unemployment, total (% of total labor force) (modeled ILO estimate)
# Unemployment refers to the share of the labor force that is without
# work but available for and seeking employment.
unemp <- WDI(indicator = 'SL.UEM.TOTL.ZS')
# CPIA transparency, accountability, and corruption in the public sector rating (1=low to 6=high)
# "Transparency, accountability, and corruption in the public sector assess
# the extent to which the executive can be held accountable for its use of
# funds and for the results of its actions by the electorate and by the
# legislature and judiciary, and the extent to which public employees within
# the executive are required to account for administrative decisions, use of
# resources, and results obtained. The three main dimensions assessed here
# are the accountability of the executive to oversight institutions and of
# public employees for their performance, access of civil society to
# information on public affairs, and state capture by narrow vested interests".
governance <- WDI(indicator = 'IQ.CPA.TRAN.XQ')
# 1.2.2. Merge the six variables into one data frame using country code and year
wdi <- merge(gasrents, gdppc,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, governance,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, oilrents,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, totrents,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, unemp,by=c("iso2c","year","country"), all = TRUE)
########################################################################################
# Subsection 1.3 - Merge the two data frames (Governance and Development Indicators)   #
########################################################################################
# 1.3.1. Use countrycode package to import ISO2C country code into WDI dataset in order to enable
# (cont.) us to merge it with the other dataset (which uses ISO2C as country code)
wdi$country <- countrycode(wdi$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
# 1.3.2. Merge the WDI and Corruption Control datasets using country code (iso2c) and year as matching variables
wdi <- merge(wdi, cc,by=c("iso2c","year", "country"), all = TRUE)
# 1.3.3. Rename the variables so they are easier to identify
wdi <- rename  (wdi,
totrents = NY.GDP.TOTL.RT.ZS,
oilrents = NY.GDP.PETR.RT.ZS,
gasrents = NY.GDP.NGAS.RT.ZS,
gdppc = NY.GDP.PCAP.KD,
unemp = SL.UEM.TOTL.ZS,
governance = IQ.CPA.TRAN.XQ,
corrupest = estimate,
country = country)
wdi <- wdi[-c(6, 10)]
wdi <- wdi[c(1,2,3,9,4,5,6,7,8)]
# 1.3.4. Eliminate observations not belonging to countries (i.e. regions and continents)
wdi <- wdi[- grep("1", wdi$iso2c),]
wdi <- wdi[- grep("4", wdi$iso2c),]
wdi <- wdi[- grep("7", wdi$iso2c),]
wdi <- wdi[- grep("8", wdi$iso2c),]
# 1.3.5. Eliminate all missing observations
wdi <- na.omit(wdi)
# 1.3.6. See unique list of values to verify that data set is OK
unique(unlist(wdi$country, use.names = FALSE))
write.csv(wdi, file="MergedData")
write.csv(wdi, file="MergedData.csv")
