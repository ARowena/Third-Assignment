names(cc) = as.character(unlist(cc[1,]))
cc = cc[-1,]
row.names(cc) <- NULL
colnames(cc)[1] <- "wbcode"
colnames(cc)[2] <- "country"
# 1.1.4. Set the years as an observation and ordering the data
cc <- gather(cc, Year, Estimate, 3:18)
cc <- cc[order(cc$country, cc$Year), ]
row.names(cc) <- NULL
# 1.1.5. Create ID for each observation and matching country codes
cc <- mutate(cc, ID = rownames(cc))
cc <- cc[c(5,1,2,3,4)]
cc$iso2c <- countrycode(cc$wbcode, origin = "wb",destination = "iso2c", warn = TRUE)
cc$country <- countrycode(cc$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
cc <- cc[c(1,6,2,3,4,5)]
cc <- cc[-c(3)]
colnames(cc)[1] <- "id"
colnames(cc)[4] <- "year"
colnames(cc)[5] <- "estimate"
#################################################################################
# Subsection 1.2 - Gather and clean data from the World Development Indicators  #
#################################################################################
# 1.2.1. Download the relevant variables for our project:
# Total natural resources rents (% of GDP) -
# "Total natural resources rents are the sum of oil rents,
# natural gas rents, coal rents (hard and soft), mineral rents, and forest rents".
totrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
# Oil rents (% of GDP) -
# "Oil rents are the difference between the value of
# oil production at world prices and total costs of production.".
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
# Natural gas rents (% of GDP) -
# "Natural gas rents are the difference between the value of
# natural gas production at world prices and total costs of production.".
gasrents <- WDI(indicator = 'NY.GDP.NGAS.RT.ZS')
# GDP per capita (constant 2005 US$)
# "GDP per capita is gross domestic product divided by midyear population.
# GDP is the sum of gross value added by all resident producers in the economy
# plus any product taxes and minus any subsidies not included in the value of
# the products. It is calculated without making deductions for depreciation of
# fabricated assets or for depletion and degradation of natural resources. Data
# are in constant 2005 U.S. dollars".
gdppc <- WDI(indicator = 'NY.GDP.PCAP.KD')
# Unemployment, total (% of total labor force) (modeled ILO estimate)
# Unemployment refers to the share of the labor force that is without
# work but available for and seeking employment.
unemp <- WDI(indicator = 'SL.UEM.TOTL.ZS')
# CPIA transparency, accountability, and corruption in the public sector rating (1=low to 6=high)
# "Transparency, accountability, and corruption in the public sector assess
# the extent to which the executive can be held accountable for its use of
# funds and for the results of its actions by the electorate and by the
# legislature and judiciary, and the extent to which public employees within
# the executive are required to account for administrative decisions, use of
# resources, and results obtained. The three main dimensions assessed here
# are the accountability of the executive to oversight institutions and of
# public employees for their performance, access of civil society to
# information on public affairs, and state capture by narrow vested interests".
governance <- WDI(indicator = 'IQ.CPA.TRAN.XQ')
# 1.2.2. Merge the six variables into one data frame using country code and year
wdi <- merge(gasrents, gdppc,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, governance,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, oilrents,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, totrents,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, unemp,by=c("iso2c","year","country"), all = TRUE)
########################################################################################
# Subsection 1.3 - Merge the two data frames (Governance and Development Indicators)   #
########################################################################################
# 1.3.1. Use countrycode package to import ISO2C country code into WDI dataset in order to enable
# (cont.) us to merge it with the other dataset (which uses ISO2C as country code)
wdi$country <- countrycode(wdi$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
# 1.3.2. Merge the WDI and Corruption Control datasets using country code (iso2c) and year as matching variables
wdi <- merge(wdi, cc,by=c("iso2c","year", "country"), all = TRUE)
# 1.3.3. Rename the variables so they are easier to identify
wdi <- rename  (wdi,
totrents = NY.GDP.TOTL.RT.ZS,
oilrents = NY.GDP.PETR.RT.ZS,
gasrents = NY.GDP.NGAS.RT.ZS,
gdppc = NY.GDP.PCAP.KD,
unemp = SL.UEM.TOTL.ZS,
governance = IQ.CPA.TRAN.XQ,
corrupest = estimate,
country = country)
wdi <- wdi[-c(6, 10)]
wdi <- wdi[c(1,2,3,9,4,5,6,7,8)]
# 1.3.4. Eliminate observations not belonging to countries (i.e. regions and continents)
wdi <- wdi[- grep("1", wdi$iso2c),]
wdi <- wdi[- grep("4", wdi$iso2c),]
wdi <- wdi[- grep("7", wdi$iso2c),]
wdi <- wdi[- grep("8", wdi$iso2c),]
# 1.3.5. Eliminate all missing observations
wdi <- na.omit(wdi)
row.names(wdi) <- NULL
View(wdi)
# 1.3.6. See unique list of values to verify that data set is OK
unique(unlist(wdi$country, use.names = FALSE))
# 1.3.7. Create labels for the variables (columns) in our data frame
var.labels <- c(iso2c = "Country Code", year = "Year", country = "Country", corrupest = "CPIA transparency, accountability, and corruption in the public sector rating (1=low to 6=high)",
gasrents = "Natural gas rents (% of GDP)", gdppc = "GDP per capita (constant 2005 US$)",
oilrents = "Oil rents (% of GDP)",
totrents = "Total natural resource rents (% of GDP)",
unemp = "Unemployment, total (% of total labor force) (modeled ILO estimate)"
)
# Create a .csv file with the final version of the data
write.csv(wdi, file="MergedData.csv")
# Create a .csv file with the final version of the data
write.csv(wdi, file="MergedData.csv")
write.csv(wdi, file="MergedData.csv")
#################################################################################################################################
# Corruption and Natural Resource Rents - by Natalia Alvarado and Gabriel Tarriba
# Due date: 13.11.2015
# This file gathers data from various sources (World Governance Indicators and World Development Indicators), cleans it, merges
# it and organizes it for analysis (Section 1). Then, it carries out analyses on the data (Section 2)
#################################################################################################################################
#################################################################################################################################
# Section I: Data preparation
#################################################################################################################################
# 1. Set working directory for our two computers (so that the code runs on either of them)
getwd()
try(setwd("/Users/Natalia/Documents/GitHub/Third-Assignment"), silent = TRUE)
try(setwd("/Users/Gabriel/Desktop/Third-Assignment"), silent = TRUE)
# 2. Load libraries
library(httr)
library(dplyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(plm)
library(tidyr)
library(countrycode)
library(dplyr)
library(Hmisc)
library(WDI)
library(xlsxjars)
library(rJava)
library(ggplot2)
##################################################################################
# Subsection 1.1 -  Gather corruption data from the World Governance Indicators  #
##################################################################################
# 1.1.1 Get the datafile from an URL and set it as a Dataframe
try(URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx", silent = TRUE)
fname <- "worldbank_wgidataset.xlsx"
if (!(file.exists(fname))) {
fname <- tempfile()
download.file(URL, fname, mode='wb')
}
controlc <- read.xlsx2(fname, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
# 1.1.2. Keep only relevant variables
cc <- controlc[c(2, 1, 3, 9, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 81, 87, 93)]
# 1.1.3. Set the years as an observation
names(cc) = as.character(unlist(cc[1,]))
cc = cc[-1,]
row.names(cc) <- NULL
colnames(cc)[1] <- "wbcode"
colnames(cc)[2] <- "country"
# 1.1.4. Set the years as an observation and ordering the data
cc <- gather(cc, Year, Estimate, 3:18)
cc <- cc[order(cc$country, cc$Year), ]
row.names(cc) <- NULL
# 1.1.5. Create ID for each observation and matching country codes
cc <- mutate(cc, ID = rownames(cc))
cc <- cc[c(5,1,2,3,4)]
cc$iso2c <- countrycode(cc$wbcode, origin = "wb",destination = "iso2c", warn = TRUE)
cc$country <- countrycode(cc$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
cc <- cc[c(1,6,2,3,4,5)]
cc <- cc[-c(3)]
colnames(cc)[1] <- "id"
colnames(cc)[4] <- "year"
colnames(cc)[5] <- "estimate"
#################################################################################
# Subsection 1.2 - Gather and clean data from the World Development Indicators  #
#################################################################################
# 1.2.1. Download the relevant variables for our project:
# Total natural resources rents (% of GDP) -
# "Total natural resources rents are the sum of oil rents,
# natural gas rents, coal rents (hard and soft), mineral rents, and forest rents".
totrents <- WDI(indicator = 'NY.GDP.TOTL.RT.ZS')
# Oil rents (% of GDP) -
# "Oil rents are the difference between the value of
# oil production at world prices and total costs of production.".
oilrents <- WDI(indicator = 'NY.GDP.PETR.RT.ZS')
# Natural gas rents (% of GDP) -
# "Natural gas rents are the difference between the value of
# natural gas production at world prices and total costs of production.".
gasrents <- WDI(indicator = 'NY.GDP.NGAS.RT.ZS')
# GDP per capita (constant 2005 US$)
# "GDP per capita is gross domestic product divided by midyear population.
# GDP is the sum of gross value added by all resident producers in the economy
# plus any product taxes and minus any subsidies not included in the value of
# the products. It is calculated without making deductions for depreciation of
# fabricated assets or for depletion and degradation of natural resources. Data
# are in constant 2005 U.S. dollars".
gdppc <- WDI(indicator = 'NY.GDP.PCAP.KD')
# Unemployment, total (% of total labor force) (modeled ILO estimate)
# Unemployment refers to the share of the labor force that is without
# work but available for and seeking employment.
unemp <- WDI(indicator = 'SL.UEM.TOTL.ZS')
# CPIA transparency, accountability, and corruption in the public sector rating (1=low to 6=high)
# "Transparency, accountability, and corruption in the public sector assess
# the extent to which the executive can be held accountable for its use of
# funds and for the results of its actions by the electorate and by the
# legislature and judiciary, and the extent to which public employees within
# the executive are required to account for administrative decisions, use of
# resources, and results obtained. The three main dimensions assessed here
# are the accountability of the executive to oversight institutions and of
# public employees for their performance, access of civil society to
# information on public affairs, and state capture by narrow vested interests".
governance <- WDI(indicator = 'IQ.CPA.TRAN.XQ')
# 1.2.2. Merge the six variables into one data frame using country code and year
wdi <- merge(gasrents, gdppc,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, governance,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, oilrents,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, totrents,by=c("iso2c","year","country"), all = TRUE)
wdi <- merge(wdi, unemp,by=c("iso2c","year","country"), all = TRUE)
########################################################################################
# Subsection 1.3 - Merge the two data frames (Governance and Development Indicators)   #
########################################################################################
# 1.3.1. Use countrycode package to import ISO2C country code into WDI dataset in order to enable
# (cont.) us to merge it with the other dataset (which uses ISO2C as country code)
wdi$country <- countrycode(wdi$iso2c, origin = "iso2c",destination = "country.name", warn = TRUE)
# 1.3.2. Merge the WDI and Corruption Control datasets using country code (iso2c) and year as matching variables
wdi <- merge(wdi, cc,by=c("iso2c","year", "country"), all = TRUE)
# 1.3.3. Rename the variables so they are easier to identify
wdi <- rename  (wdi,
totrents = NY.GDP.TOTL.RT.ZS,
oilrents = NY.GDP.PETR.RT.ZS,
gasrents = NY.GDP.NGAS.RT.ZS,
gdppc = NY.GDP.PCAP.KD,
unemp = SL.UEM.TOTL.ZS,
governance = IQ.CPA.TRAN.XQ,
corrupest = estimate,
country = country)
wdi <- wdi[-c(6, 10)]
wdi <- wdi[c(1,2,3,9,4,5,6,7,8)]
# 1.3.4. Eliminate observations not belonging to countries (i.e. regions and continents)
wdi <- wdi[- grep("1", wdi$iso2c),]
wdi <- wdi[- grep("4", wdi$iso2c),]
wdi <- wdi[- grep("7", wdi$iso2c),]
wdi <- wdi[- grep("8", wdi$iso2c),]
# 1.3.5. Eliminate all missing observations
wdi <- na.omit(wdi)
View(wdi)
row.names(wdi) <- NULL
View(wdi)
# 1.3.6. See unique list of values to verify that data set is OK
unique(unlist(wdi$country, use.names = FALSE))
# 1.3.7. Create labels for the variables (columns) in our data frame
var.labels <- c(iso2c = "Country Code", year = "Year", country = "Country", corrupest = "CPIA transparency, accountability, and corruption in the public sector rating (1=low to 6=high)",
gasrents = "Natural gas rents (% of GDP)", gdppc = "GDP per capita (constant 2005 US$)",
oilrents = "Oil rents (% of GDP)",
totrents = "Total natural resource rents (% of GDP)",
unemp = "Unemployment, total (% of total labor force) (modeled ILO estimate)"
)
View(wdi)
# Create a .csv file with the final version of the data
write.csv(wdi, file="MergedData.csv")
install.packages("texreg")
library(knitr)
library(ggplot2)
library(texreg)
# Set working directory
getwd()
try(setwd("/Users/Natalia/Documents/GitHub/Third-Assignment"), silent = TRUE)
try(setwd("/Users/Gabriel/Desktop/Third-Assignment"), silent = TRUE)
# Load necessary packages, if you do not have this packages installed we highly recommend it
library(ggplot2)
library(repmis)
library(knitr)
library(plm)
library(Hmisc)
library(ggplot2)
# Load Data
merged <- read.csv(file="MergedData.csv")
View(merged)
corr1 <- cor.test(merged$corrupest, merged$totrents)
print(corr1)
```{r, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE}
corr2 <- cor.test(merged$corrupest, merged$oilrents)
print(corr2)
corr3 <- cor.test(merged$corrupest, merged$gasrents)
print(corr3)
try(setwd("/Users/Natalia/Documents/GitHub/Third-Assignment"), silent = TRUE)
library(ggplot2)
library(repmis)
library(knitr)
library(plm)
library(Hmisc)
library(ggplot2)
hist(full_data$corrupest, main = 'Corruption Control Score', abline(v = mean(beaver1$temp), col = "royalblue", lwd = 2))
hist(merged$corrupest, main = 'Corruption Control Score', abline(v = mean(beaver1$temp), col = "royalblue", lwd = 2))
hist(merged$corrupest,
col = "peachpuff",
border = "black",
prob = TRUE,
xlab = "Control of Corruption",
main = 'Corruption Control Histogram')
lines(density(merged$corrupest)
lwd = 2,
col = "chocolate3")
abline(v = mean(merged$corrupest),
col = "royalblue",
lwd = 2)
abline(v = median(merged$corrupest),
col = "red",
lwd = 2)
legend(x = "topright",
c("Density plot", "Mean", "Median"),
col = c("chocolate3", "royalblue", "red"),
lwd = c(2, 2, 2))
hist(merged$corrupest,
col = "peachpuff",
border = "black",
prob = TRUE,
xlab = "Control of Corruption",
main = 'Corruption Control Histogram')
lines(density(merged$corrupest),
lwd = 2,
col = "chocolate3")
abline(v = mean(merged$corrupest),
col = "royalblue",
lwd = 2)
abline(v = median(merged$corrupest),
col = "red",
lwd = 2)
legend(x = "topright",
c("Density plot", "Mean", "Median"),
col = c("chocolate3", "royalblue", "red"),
lwd = c(2, 2, 2))
histcorruption <- hist(merged$corrupest,
col = "peachpuff",
border = "black",
prob = TRUE,
xlim = c(36,38.5),
ylim = c(0,3),
xlab = "Control of Corruption",
main = 'Corruption Control Histogram')
lines(density(merged$corrupest),
lwd = 2,
col = "chocolate3")
abline(v = mean(merged$corrupest),
col = "royalblue",
lwd = 2)
abline(v = median(merged$corrupest),
col = "red",
lwd = 2)
legend(x = "topright",
c("Density plot", "Mean", "Median"),
col = c("chocolate3", "royalblue", "red"),
lwd = c(2, 2, 2))
print(histcorruption)
histcorruption <- hist(merged$corrupest,
col = "peachpuff",
border = "black",
prob = TRUE,
xlab = "Control of Corruption",
main = 'Corruption Control Histogram')
lines(density(merged$corrupest),
lwd = 2,
col = "chocolate3")
abline(v = mean(merged$corrupest),
col = "royalblue",
lwd = 2)
abline(v = median(merged$corrupest),
col = "red",
lwd = 2)
legend(x = "topright",
c("Density plot", "Mean", "Median"),
col = c("chocolate3", "royalblue", "red"),
lwd = c(2, 2, 2))
print(histcorruption)
histoilrents <- hist(merged$oilrents,
col = "peachpuff",
border = "black",
prob = TRUE,
xlab = "% of Oil Rents to GDP",
main = 'Oil Rents to GDP Histogram')
lines(density(merged$oilrents),
lwd = 2,
col = "chocolate3")
abline(v = mean(merged$oilrents),
col = "royalblue",
lwd = 2)
abline(v = median(merged$oilrents),
col = "red",
lwd = 2)
legend(x = "topright",
c("Density plot", "Mean", "Median"),
col = c("chocolate3", "royalblue", "red"),
lwd = c(2, 2, 2))
print(histoilrents)
histtotrents <- hist(merged$totrents,
col = "peachpuff",
border = "black",
prob = TRUE,
xlab = "% of Total Rents to GDP",
main = 'Total Natural Resources Rents to GDP Histogram')
lines(density(merged$totrents),
lwd = 2,
col = "chocolate3")
abline(v = mean(merged$totrents),
col = "royalblue",
lwd = 2)
abline(v = median(merged$oilrents),
col = "red",
lwd = 2)
legend(x = "topright",
c("Density plot", "Mean", "Median"),
col = c("chocolate3", "royalblue", "red"),
lwd = c(2, 2, 2))
print(histtotrents)
#Set data as panel data
merged <- plm.data(merged, index=c("iso2c", "year"))
install.packages("rworldmap")
library(rworldmap)
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c")
mapDevice(Map1)
mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = c("darkorange", "coral2","gold","aquamarine1", "cyan3", "blue","magenta"),
borderCol='grey')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c")
mapDevice(Map1)
mapCountryData(world_corruption, nameColumnToPlot=(('corrupest') if ("year"=2010)), mapTitle= 'Governance around the World',
colourPalette = c("darkorange",
"coral2","gold","aquamarine1",
"cyan3", "blue","magenta"),
borderCol='grey')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c")
mapDevice(Map1)
mapCountryData(world_corruption, nameColumnToPlot=(('corrupest') if ('year'=2010)), mapTitle= 'Governance around the World',
colourPalette = c("darkorange",
"coral2","gold","aquamarine1",
"cyan3", "blue","magenta"),
borderCol='grey')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c")
mapDevice(Map1)
mapCountryData(world_corruption, nameColumnToPlot=('corrupest' if ('year'=2010), mapTitle= 'Governance around the World',
colourPalette = c("darkorange",
"coral2","gold","aquamarine1",
"cyan3", "blue","magenta"),
borderCol=('grey'))
library(RColorBrewer)
colorpalette <- brewer.pal(6,'PRGn')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(6,'PRGn')
mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = colorpalette,
borderCol='grey')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(11,'RdYlBu')
mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = colorpalette,
borderCol='grey')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(11,'RdYlBu')
world_gov <- mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = colorpalette,
borderCol='black')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(11,'RdYlBu')
world_gov <- mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = colorpalette,
borderCol='white')
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(11,'RdYlBu')
world_gov <- mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
catMethod = catMethod,
colourPalette = colorpalette)
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(11,'RdYlBu')
world_gov <- mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = colorpalette)
world_corruption <- joinCountryData2Map(merged
,joinCode = "ISO2"
,nameJoinColumn = "iso2c"
,mapResolution = 'coarse')
mapDevice(Map1)
colorpalette <- brewer.pal(7,'RdYlBu')
world_gov <- mapCountryData(world_corruption, nameColumnToPlot='corrupest', mapTitle= 'Governance around the World',
colourPalette = colorpalette)
